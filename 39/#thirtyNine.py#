#!/usr/bin/python3
# -*- coding: utf-8 -*-

import math

persons = list()

FIRST_NAME = "firstName"
LAST_NAME = "lastName"
NAME = "Name"
POSITION = "Position"
SEPARATION_DATE = "Separation date"

persons.append({FIRST_NAME : "John", LAST_NAME: "Johnson", POSITION: "Manager", SEPARATION_DATE: "2016-12-31"})
persons.append({FIRST_NAME : "Tou", LAST_NAME: "Xiong", POSITION: "Software Engineer", SEPARATION_DATE: "2016-10-05"})
persons.append({FIRST_NAME : "Michaela", LAST_NAME: "Michaelson", POSITION: "District Manager", SEPARATION_DATE: "2015-12-19"})
persons.append({FIRST_NAME : "Jake", LAST_NAME: "Jacobson", POSITION: "Programmer"})
persons.append({FIRST_NAME : "Jacquelyn", LAST_NAME: "Jackson", POSITION: "DBA"})
persons.append({FIRST_NAME : "Sally", LAST_NAME: "Weber", POSITION: "Web Developer", SEPARATION_DATE: "2015-12-18"})

NAME_COLUMN_TITLE = "Name"
POSITION_COLUMN_TITLE = "Position" 
SEPARATION_DATE_COLUMN_TITLE = "Separation Date" 

def sort_based_on_last_name():
    sorted_persons = list()
    
    sorted_persons.append(persons[0])
    index = 1
    while index < len(persons):
        j = 0
        person_to_insert = persons[index]
        insertion_position_found = False
        while insertion_position_found == False and j < len(sorted_persons):
            if person_to_insert[LAST_NAME] < sorted_persons[j][LAST_NAME]:
                insertion_position_found = True
                sorted_persons.insert(j, person_to_insert)
            j += 1

        if insertion_position_found == False:
            sorted_persons.append(person_to_insert)
        index += 1
    return sorted_persons

def calculate_column_widths(length_of_longest_name, length_of_longest_position, length_of_longest_separation_date):
    name_column_width = max(len(NAME_COLUMN_TITLE), length_of_longest_name) + 2 # +1 for the space between first name and last name, +1 for the trailing space.
    position_column_width = max(len(POSITION_COLUMN_TITLE), length_of_longest_position) + 2 # +1 for the leading space +1 for the trailing space.
    separation_date_column_width = max(len(SEPARATION_DATE_COLUMN_TITLE), length_of_longest_separation_date) + 1 # +1 for the trailing space.

    return (name_column_width, position_column_width, separation_date_column_width)
    
def print_header(name_column_width, position_column_width, separation_date_column_width):
    print(NAME_COLUMN_TITLE, end='')
    print(" " * (name_column_width - len(NAME_COLUMN_TITLE)), end='')
    print("| ", end='')
    print(POSITION_COLUMN_TITLE, end='')
    print(" " * (position_column_width - len(POSITION_COLUMN_TITLE) - 1), end='') # -1 because one space is included in "| "
    print("| ", end='')
    print(SEPARATION_DATE_COLUMN_TITLE, end='')
    print(" " * (separation_date_column_width - len(SEPARATION_DATE_COLUMN_TITLE) -1))

    print("-" * name_column_width, end='')
    print("|", end='')
    print("-" * position_column_width, end='')
    print("|", end='')
    print("-" * separation_date_column_width)

def print_person(person, name_column_width, position_column_width, separation_date_column_width):
    name = person[FIRST_NAME] + " " + person[LAST_NAME]
    position = person[POSITION]
    separation_date = ""
    if SEPARATION_DATE in person:
        separation_date = person[SEPARATION_DATE]
    print(name, end='')
    print(" " * (name_column_width - len(name)), end='')
    print("| ", end='')
    print(position, end='')
    print(" " * (position_column_width - len(position) - 1), end='') # -1 because one space is included in "| "
    print("| ", end='')
    print(separation_date)

def length_of_longest_name():
    max_so_far = 0
    for person in persons:
        name_len = len(person[FIRST_NAME]) + len(person[LAST_NAME])
        if name_len > max_so_far:
            max_so_far = name_len
    return max_so_far
          
def length_of_longest_attribute_value_of_person(attribute):
    max_so_far = 0
    for person in persons:
        if attribute in person:
            attribute_value_len = len(person[attribute])
            if attribute_value_len > max_so_far:
                max_so_far = attribute_value_len
    return max_so_far

def length_of_longest_position():
    return length_of_longest_attribute_value_of_person(POSITION)

def length_of_longest_separation_date():
    return length_of_longest_attribute_value_of_person(SEPARATION_DATE)
          
def main():
    sorted_persons = sort_based_on_last_name()
    (name_column_width, position_column_width, separation_date_column_width) = calculate_column_widths(length_of_longest_name(), length_of_longest_position(), length_of_longest_separation_date())
    print_header(name_column_width, position_column_width, separation_date_column_width)
    for person in sorted_persons:
        print_person(person, name_column_width, position_column_width, separation_date_column_width)

def print_character_repeatedly(char, number_of_times_to_print):
    for i in range(0, number_of_times_to_print):
            print(char, end='')

def print_header(len_of_longest_name, len_of_longest_position, len_of_longest_separation_date):
    print(NAME, end='')
    print_character_repeatedly(' ', len_of_longest_name - len('Name') + 1)
    print('|', end='')
    print(' ', end='')
    print(POSITION, end='')
    print_character_repeatedly(' ', len_of_longest_position - len('Position') + 1)
    print('|', end='')
    print(' ', end='')
    print(SEPARATION_DATE, end='')
    print("")

    print_character_repeatedly('-', len_of_longest_name + 1)
    print('|', end='')
    print_character_repeatedly('-', len_of_longest_position + 2)
    print('|', end='')
    print_character_repeatedly('-', len_of_longest_separation_date + 1)
    print("")
    
def print_person(person, len_of_longest_name, len_of_longest_position, len_of_longest_separation_date):
    name = "%s %s"% (person[FIRST_NAME], person[LAST_NAME])
    print(name, end='')
    print_character_repeatedly(' ', len_of_longest_name - len(name) + 1)
    print('|', end='')
    print(' ', end='')
    print(person[POSITION], end='')
    print_character_repeatedly(' ', len_of_longest_position - len(person[POSITION]) + 1)
    print('|', end='')
    print(' ', end='')
    if SEPARATION_DATE in person:
        print(person[SEPARATION_DATE], end='')
    print("")

def length_of_longest(key):
    max_so_far = 0
    for person in persons:
        if key in person and len(person[key]) > max_so_far:
            max_so_far = len(person[key])
    return max_so_far
            
def longest_name():
    max_so_far = 0
    for person in persons:
        l = len(person[FIRST_NAME]) + len(person[LAST_NAME])
        if l > max_so_far:
            max_so_far = l
    return max_so_far

def longest_position():
    return length_of_longest(POSITION)

def longest_separation_date():
    return length_of_longest(SEPARATION_DATE)

def main():
    sorted_persons = sort_based_on_last_name()
    len_of_longest_name = longest_name()
    len_of_longest_position = longest_position()
    len_of_longest_separation_date = longest_separation_date()

    # The string 'Separation date' might be longer than the longest separation date value.
    if len(SEPARATION_DATE) > len_of_longest_separation_date:
        len_of_longest_separation_date = len(SEPARATION_DATE)
    
    print_header(len_of_longest_name, len_of_longest_position, len_of_longest_separation_date)
    for person in sorted_persons:
        print_person(person, len_of_longest_name, len_of_longest_position, len_of_longest_separation_date)
    
### MAIN ###

if __name__ == '__main__':
    main()
